name: Extended builds

on:
  push:
  pull_request:

jobs:
  test_report:
    runs-on: ubuntu-latest
    steps:
      - name: Install tools
        run: sudo apt-get install -y ant-optional
      - name: Checkout
        uses: actions/checkout@main
      - run: |
          autoreconf -i .
          ./configure
          make check
          ./CppUTestTests -ojunit
          ./CppUTestExtTests -ojunit
          cp ./scripts/generate_junit_report_ant.xml .
          ant -f generate_junit_report_ant.xml

  cmake_coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Install tools
        run: |
          pip install --user gcovr
          sudo apt install lcov
      - name: Checkout
        uses: actions/checkout@main
      - name: Configure
        run: >
          cmake
          -S .
          -B cpputest_build
          -D CMAKE_BUILD_TYPE=Debug
          -D C++11=ON
          -D COVERAGE=ON
          -D LONGLONG=ON
      - name: Build
        run: cmake --build cpputest_build
      - name: Test
        run: ctest --test-dir cpputest_build
      - name: Coverage
        run: lcov --capture --directory . --output-file lcov.info
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          path-to-lcov: lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

  make_dos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Install tools
        run: |
          sudo apt-get install -y dosbox
          git clone https://github.com/cpputest/watcom-compiler.git watcom
          echo "WATCOM=$GITHUB_WORKSPACE/watcom" >> $GITHUB_ENV
          echo "CC=wcl" >> $GITHUB_ENV
          echo "CXX=wcl" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/watcom/binl" >> $GITHUB_PATH
          echo "CPPUTEST_HOME=$GITHUB_WORKSPACE" >> $GITHUB_ENV
      - name: Build
        run: |
          $CC --version
          make -f $CPPUTEST_HOME/platforms/Dos/Makefile clean
          make -f $CPPUTEST_HOME/platforms/Dos/Makefile
      - name: Test
        env:
          TERM: linux
        run: $CPPUTEST_HOME/platforms/Dos/alltests.sh

  cmake_wine:
    runs-on: ubuntu-latest
    env:
      CC: x86_64-w64-mingw32-gcc
      CXX: x86_64-w64-mingw32-g++
    steps:
      - name: Install tools
        run: sudo apt-get install -y mingw-w64 wine64
      - name: Checkout
        uses: actions/checkout@main
      - name: Configure
        run: >
          cmake
          -B build
          -S .
          -D CMAKE_SYSTEM_NAME=Windows
          -D CMAKE_CROSSCOMPILING_EMULATOR=wine
      - name: Build
        run: cmake --build build --verbose
      - name: Test
        run: ctest --test-dir build
