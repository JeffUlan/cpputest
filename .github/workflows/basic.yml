---
name: Basic builds

"on":
  push:
  pull_request:

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - uses: DoozyX/clang-format-lint-action@v0.14
        with:
          clangFormatVersion: 14
          source: examples

  automake:
    strategy:
      matrix:
        include:
          # Mac OSX
          - os: macos-latest
            cc: gcc
            cxx: g++
          - os: macos-latest
            cc: clang
            cxx: clang++
          # Linux
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
          - os: ubuntu-latest
            cc: clang
            cxx: clang++
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - run: brew install automake
        if: ${{ startswith(matrix.os, 'macos') }}
      - if: ${{ matrix.cxx }}
        run: echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV
      - if: ${{ matrix.cc }}
        run: echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
      - name: Configure
        run: |
          autoreconf -i .
          ./configure
      - name: Build and test
        run: make tdd

  cmake:
    strategy:
      matrix:
        include:
          # Windows
          - os: windows-latest
            cpp_version: 17
            preset: MSVC
            # install: true
          - os: windows-latest
            cpp_version: 17
            preset: ClangCL
          # Linux
          #   CMake different C++ versions with clang
          - os: ubuntu-latest
            cpp_version: 98
            preset: Clang
          - os: ubuntu-latest
            cpp_version: 11
            preset: Clang
          - os: ubuntu-latest
            cpp_version: 14
            preset: Clang
          - os: ubuntu-latest
            cpp_version: 17
            preset: Clang
          #   CMake different C++ versions with gcc
          - os: ubuntu-latest
            cpp_version: 98
            preset: GNU
          - os: ubuntu-latest
            cpp_version: 98
            preset: no-long-long
          - os: ubuntu-latest
            cpp_version: 11
            preset: GNU
            install: true
          - os: ubuntu-latest
            cpp_version: 14
            preset: GNU
          - os: ubuntu-latest
            cpp_version: 17
            preset: GNU
          - os: ubuntu-latest
            cpp_version: 11
            preset: MinGW
            apt_packages: mingw-w64 wine64
          - os: ubuntu-latest
            cpp_version: 98
            preset: no-std-cpp
          - os: ubuntu-latest
            cpp_version: 11
            preset: coverage
            apt_packages: lcov
          - os: ubuntu-latest
            cpp_version: 11
            preset: arm-embedded
          # Mac OSX
          - os: macos-latest
            cpp_version: 98
            preset: defaults
            install: true
          - os: macos-latest
            cpp_version: 17
            preset: Clang
          - os: macos-latest
            cpp_version: 14
            preset: GNU
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install tools
        run: sudo apt install ${{ matrix.apt_packages }}
        if: ${{ matrix.apt_packages }}
      - uses: carlosperate/arm-none-eabi-gcc-action@v1
        if: ${{ matrix.preset == 'arm-embedded' }}
      - name: Install QEMU
        # The version in the ubuntu repositories (6.2) is broken.
        run: |
          wget -nv http://ftp.de.debian.org/debian/pool/main/q/qemu/qemu-user-static_7.1+dfsg-2_amd64.deb -O qemu.deb
          sudo dpkg --install qemu.deb
          rm -f qemu.deb
        if: ${{ matrix.preset == 'arm-embedded' }}
      - name: Checkout
        uses: actions/checkout@main
      - name: Configure
        run: >
          cmake
          --preset ${{ matrix.preset }}
          -D CMAKE_CXX_STANDARD=${{ matrix.cpp_version }}
      - name: Build
        run: cmake --build cpputest_build --verbose
      - name: Test
        run: ctest --test-dir cpputest_build
      - name: Install
        run: sudo cmake --install cpputest_build/
        if: ${{ matrix.install }}
      - name: Use install
        run: |
          cmake -B build -S examples
          cmake --build build -j
          ctest --test-dir build
        if: ${{ matrix.install }}
      - name: Coverage
        run: |
          lcov --capture --directory . --no-external --output-file lcov.info
          lcov --remove lcov.info --output-file lcov.info '*/tests/*'
        if: ${{ matrix.preset == 'coverage' }}
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          path-to-lcov: lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ matrix.preset == 'coverage' }}
