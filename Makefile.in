

SILENCE = @SILENCE@

CPPUTEST_NAME = @PACKAGE_NAME@

CPPUTEST_OBJS_DIR = @CPPUTEST_OBJS_DIR@
CPPUTEST_LIB_DIR = @CPPUTEST_LIB_DIR@
CPPUTEST_USE_STD_C_LIB = @CPPUTEST_USE_STD_C_LIB@
CPPUTEST_TEST_EXEC = @CPPUTEST_TEST_EXEC@

CC = @CC@
CXX = @CXX@
CPP = @CPP@
LD = @LD@

CFLAGS = @CFLAGS@ @CPPUTEST_CFLAGS@ @CPPUTEST_ADDITIONAL_CFLAGS@
CPPFLAGS = @CPPFLAGS@ @CPPUTEST_CPPFLAGS@ @CPPUTEST_ADDITIONAL_CPPFLAGS@
CXXFLAGS = @CXXFLAGS@ @CPPUTEST_CXXFLAGS@ @CPPUTEST_ADDITIONAL_CXXFLAGS@
LDFLAGS = @LDFLAGS@ @CPPUTEST_LDFLAGS@ @CPPUTEST_LDFLAGS@

srcdir = @srcdir@

CPPUTEST_SRC_DIRS = @CPPUTEST_SRC_DIRS@
CPPUTEST_TEST_DIRS = @CPPUTEST_TEST_DIRS@

# Helper macros
__src_to = $(subst .c,$1, $(subst .cpp,$1,$2))
convert_to_obj_files=$(addprefix $(CPPUTEST_OBJS_DIR)/$1/,$(call __src_to,.o,$(call notdir,$2)))
get_obj_files_from_src_dir = $(call convert_to_obj_files,$1,$(call get_src_from_dir,$(srcdir)/$1))
get_obj_files_from_multiple_CPPUTEST_SRC_DIRS = $(foreach dir,$1,$(call get_obj_files_from_src_dir,$(dir))) 

CPPUTEST_OBJ = $(call get_obj_files_from_multiple_CPPUTEST_SRC_DIRS,$(CPPUTEST_SRC_DIRS))
CPPUTEST_TEST_OBJ = $(call get_obj_files_from_multiple_CPPUTEST_SRC_DIRS,$(CPPUTEST_TEST_DIRS))

CPPUTEST_LIB = @CPPUTEST_LIB@


CPPUTEST_TEST_EXEC = $(CPPUTEST_NAME)_tests

#Helper Functions
get_src_from_dir  = $(wildcard $1/*.cpp) $(wildcard $1/*.c)
get_dirs_from_dirspec  = $(wildcard $1)
get_src_from_dir_list = $(foreach dir, $1, $(call get_src_from_dir,$(dir)))
src_to = $(addprefix $(CPPUTEST_OBJS_DIR)/,$(call __src_to,$1,$2))
src_to_o = $(call src_to,.o,$1)
src_to_d = $(call src_to,.d,$1)
src_to_gcda = $(call src_to,.gcda,$1)
src_to_gcno = $(call src_to,.gcno,$1)
time = $(shell date +%s)
delta_t = $(eval minus, $1, $2)
debug_print_list = $(foreach word,$1,echo "  $(word)";) echo;

ALL_SRC = $(SRC) $(TEST_SRC)

RUN_TEST_TARGET = $(SILENCE)echo "Running $(CPPUTEST_TEST_EXEC)"; ./$(CPPUTEST_TEST_EXEC) $(CPPUTEST_EXE_FLAGS)

LD_LIBRARIES += -lstdc++

DEP_FILES = $(call src_to_d, $(ALL_SRC))

# Don't consider creating the archive a warning condition that does STDERR output
ARFLAGS := $(ARFLAGS)c

DEP_FLAGS=-MMD -MP

# Some macros for programs to be overridden. For some reason, these are not in Make defaults
RANLIB = ranlib

# Targets

.PHONY: all
all: start $(CPPUTEST_TEST_EXEC)  
	$(RUN_TEST_TARGET)	

.PHONY: start
start: $(CPPUTEST_TEST_EXEC) 
	$(SILENCE)START_TIME=$(call time)

TEST_DEPS = $(CPPUTEST_TEST_OBJ) $(CPPUTEST_LIB)
test-deps: $(TEST_DEPS)

$(CPPUTEST_TEST_EXEC): $(TEST_DEPS)
	@echo Linking $@
	$(SILENCE)$(LINK.o) -o $@ $^ $(LD_LIBRARIES)

$(CPPUTEST_LIB): $(CPPUTEST_OBJ)
	@echo Building archive $@
	$(SILENCE)mkdir -p $(dir $@)
	$(SILENCE)$(AR) $(ARFLAGS) $@ $^
	$(SILENCE)$(RANLIB) $@

test: $(CPPUTEST_TEST_EXEC)
	$(RUN_TEST_TARGET) | tee $(TEST_OUTPUT)
	
$(CPPUTEST_OBJS_DIR)/%.o: $(srcdir)/%.cpp
	@echo compiling $(notdir $<)
	$(SILENCE)mkdir -p $(dir $@)
	$(SILENCE)$(COMPILE.cpp) $(DEP_FLAGS) $(OUTPUT_OPTION) $<

$(CPPUTEST_OBJS_DIR)/%.o: $(srcdir)/%.c
	@echo compiling $(notdir $<)
	$(SILENCE)mkdir -p $(dir $@)
	$(SILENCE)$(COMPILE.c) $(DEP_FLAGS)  $(OUTPUT_OPTION) $<

ifneq "$(MAKECMDGOALS)" "clean"
-include $(DEP_FILES)
endif
